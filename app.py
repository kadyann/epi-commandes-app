import streamlit as st
import pandas as pd
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import os
from datetime import datetime, timedelta
import io
import time
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
import json
import random
import psycopg2

# Imports ReportLab
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch

# Configuration de la page
st.set_page_config(
    page_title="üõí Bienvenue dans Commande Articles et EPI",
    page_icon="üõí",
    layout="wide"
)

# Configuration base de donn√©es (nettoyer la logique)
if 'DATABASE_URL' in os.environ:
    # Production Railway avec PostgreSQL
    DATABASE_URL = os.environ['DATABASE_URL']
    USE_POSTGRESQL = True
else:
    # D√©veloppement local avec SQLite
    DATABASE_PATH = 'commandes.db'
    USE_POSTGRESQL = False

# === FONCTIONS BASE DE DONN√âES CORRIG√âES ===

def init_database():
    """Cr√©er la base de donn√©es et les tables"""
    if USE_POSTGRESQL:
        # PostgreSQL (Railway)
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS commandes (
                id SERIAL PRIMARY KEY,
                date TEXT NOT NULL,
                contrema√Ætre TEXT NOT NULL,
                equipe TEXT NOT NULL,
                articles_json TEXT NOT NULL,
                total_prix REAL NOT NULL,
                nb_articles INTEGER NOT NULL,
                statut TEXT DEFAULT 'valid√©e'
            )
        ''')
    else:
        # SQLite (Local)
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS commandes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                contrema√Ætre TEXT NOT NULL,
                equipe TEXT NOT NULL,
                articles_json TEXT NOT NULL,
                total_prix REAL NOT NULL,
                nb_articles INTEGER NOT NULL,
                statut TEXT DEFAULT 'valid√©e'
            )
        ''')
    
    conn.commit()
    conn.close()

def save_commande_to_db(contrema√Ætre, equipe, cart_items, total_prix):
    """Sauvegarder une commande dans la base de donn√©es"""
    import pandas as pd
    
    if USE_POSTGRESQL:
        # PostgreSQL (Railway)
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
    else:
        # SQLite (Local)
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
    
    # Conversion ultra-s√ªre des articles
    cart_safe = []
    for item in cart_items:
        item_safe = {}
        for key, value in item.items():
            try:
                if value is None or (hasattr(pd, 'isna') and pd.isna(value)):
                    item_safe[key] = ""
                elif isinstance(value, (str, int, float, bool)):
                    item_safe[key] = value
                elif hasattr(value, 'item'):
                    item_safe[key] = value.item()
                else:
                    item_safe[key] = str(value)
                    
                if key == 'Prix':
                    item_safe[key] = float(item_safe[key])
                    
            except Exception:
                item_safe[key] = str(value)
        
        cart_safe.append(item_safe)
    
    # S√©rialisation JSON
    try:
        articles_json = json.dumps(cart_safe, ensure_ascii=False, default=str)
    except Exception as e:
        articles_json = json.dumps(str(cart_safe), ensure_ascii=False)
    
    date_now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    nb_articles = len(cart_safe)
    
    if USE_POSTGRESQL:
        # PostgreSQL - Syntaxe %s et RETURNING
        cursor.execute('''
            INSERT INTO commandes (date, contrema√Ætre, equipe, articles_json, total_prix, nb_articles)
            VALUES (%s, %s, %s, %s, %s, %s) RETURNING id
        ''', (date_now, contrema√Ætre, equipe, articles_json, total_prix, nb_articles))
        commande_id = cursor.fetchone()[0]
    else:
        # SQLite - Syntaxe ? et lastrowid
        cursor.execute('''
            INSERT INTO commandes (date, contrema√Ætre, equipe, articles_json, total_prix, nb_articles)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (date_now, contrema√Ætre, equipe, articles_json, total_prix, nb_articles))
        commande_id = cursor.lastrowid
    
    conn.commit()
    conn.close()
    
    return commande_id

def get_all_commandes():
    """R√©cup√©rer toutes les commandes"""
    if USE_POSTGRESQL:
        # PostgreSQL
        conn = psycopg2.connect(DATABASE_URL)
    else:
        # SQLite
        conn = sqlite3.connect(DATABASE_PATH)
    
    df = pd.read_sql_query("SELECT * FROM commandes ORDER BY date DESC", conn)
    conn.close()
    return df

def get_statistics():
    """Calculer les statistiques des commandes"""
    try:
        df_commandes = get_all_commandes()
        
        if len(df_commandes) == 0:
            return {
                'total_commandes': 0,
                'total_depense': 0,
                'df_equipes': pd.DataFrame(),
                'df_contremaitres': pd.DataFrame(),
                'df_mensuel': pd.DataFrame()
            }
        
        # Statistiques globales
        total_commandes = len(df_commandes)
        total_depense = df_commandes['total_prix'].sum()
        
        # Groupement par √©quipe
        df_equipes = df_commandes.groupby('equipe')['total_prix'].agg(['sum', 'count']).reset_index()
        df_equipes.columns = ['equipe', 'total_prix', 'nb_commandes']
        df_equipes = df_equipes.sort_values('total_prix', ascending=False)
        
        # Groupement par contrema√Ætre
        df_contremaitres = df_commandes.groupby('contrema√Ætre')['total_prix'].agg(['sum', 'count']).reset_index()
        df_contremaitres.columns = ['contrema√Ætre', 'total_prix', 'nb_commandes']
        df_contremaitres = df_contremaitres.sort_values('total_prix', ascending=False)
        
        # √âvolution mensuelle
        df_commandes['mois'] = pd.to_datetime(df_commandes['date']).dt.to_period('M')
        df_mensuel = df_commandes.groupby('mois')['total_prix'].sum().reset_index()
        df_mensuel['mois'] = df_mensuel['mois'].astype(str)
        
        return {
            'total_commandes': total_commandes,
            'total_depense': total_depense,
            'df_equipes': df_equipes,
            'df_contremaitres': df_contremaitres,
            'df_mensuel': df_mensuel
        }
        
    except Exception as e:
        return {
            'total_commandes': 0,
            'total_depense': 0,
            'df_equipes': pd.DataFrame(),
            'df_contremaitres': pd.DataFrame(), 
            'df_mensuel': pd.DataFrame()
        }

# Initialiser la base de donn√©es au d√©marrage
init_database()

# === PUIS LE RESTE DU CODE (variables, constantes, etc.) ===

# Variables de session
if 'cart' not in st.session_state:
    st.session_state.cart = []
    
if 'selected_category' not in st.session_state:
    st.session_state.selected_category = None

if 'show_search' not in st.session_state:
    st.session_state.show_search = False

# Configuration
MAX_CART_AMOUNT = 1500.0  # Budget maximum autoris√©

# Force le rechargement CSS avec un timestamp
css_version = int(time.time())

# CSS simplifi√© sans les styles email
st.markdown("""
<style>
.main-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 3rem 0;
    margin-bottom: 2rem;
    border-radius: 0 0 20px 20px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.pdf-section {
    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
    padding: 1.5rem;
    border-radius: 15px;
    margin: 1rem 0;
    text-align: center;
    box-shadow: 0 5px 15px rgba(168, 237, 234, 0.3);
}

.success-message {
    background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%);
    padding: 1rem;
    border-radius: 10px;
    margin: 1rem 0;
}

.category-card {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    padding: 2rem;
    border-radius: 20px;
    margin: 1rem 0;
    box-shadow: 0 8px 32px rgba(240, 147, 251, 0.3);
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    text-align: center;
}

.category-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 45px rgba(240, 147, 251, 0.4);
}

.category-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
}

.category-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
    margin-bottom: 0.5rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.category-count {
    color: rgba(255, 255, 255, 0.9);
    font-size: 1rem;
}

.article-card {
    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
    padding: 1.5rem;
    border-radius: 15px;
    margin: 1rem 0;
    box-shadow: 0 5px 15px rgba(168, 237, 234, 0.3);
    transition: all 0.2s ease;
    border-left: 4px solid #667eea;
}

.article-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(168, 237, 234, 0.4);
}

.article-name {
    font-size: 1.2rem;
    font-weight: bold;
    color: #2d3748;
    margin-bottom: 0.5rem;
}

.article-description {
    color: #4a5568;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
}

.article-price {
    color: #667eea;
    font-weight: bold;
    font-size: 1.1rem;
}

.search-section {
    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
    padding: 2rem;
    border-radius: 15px;
    margin: 2rem 0;
    text-align: center;
    box-shadow: 0 5px 15px rgba(252, 182, 159, 0.3);
}

.cart-summary {
    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
    padding: 1.5rem;
    border-radius: 15px;
    margin: 1rem 0;
    box-shadow: 0 5px 15px rgba(168, 237, 234, 0.3);
}

.bounce-in {
    animation: bounceIn 0.6s ease-out;
}

@keyframes bounceIn {
    0% { transform: scale(0); opacity: 0; }
    50% { transform: scale(1.05); opacity: 1; }
    100% { transform: scale(1); }
}

/* Optimisations mobile */
@media (max-width: 768px) {
    .main-header h1 {
        font-size: 1.8rem !important;
    }
    
    .category-card {
        margin-bottom: 1rem !important;
        padding: 1rem !important;
    }
    
    .article-card {
        margin-bottom: 0.8rem !important;
        padding: 0.8rem !important;
    }
    
    .stButton > button {
        width: 100% !important;
        padding: 0.75rem !important;
        font-size: 0.9rem !important;
    }
    
    .css-1d391kg {
        padding: 1rem !important;
    }
}

/* Am√©lioration des emails sur mobile */
.email-section {
    background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
    padding: 1rem;
    border-radius: 10px;
    margin: 1rem 0;
}

.mobile-friendly-input input {
    font-size: 16px !important;
}
</style>
""", unsafe_allow_html=True)

# Lire et nettoyer les donn√©es
@st.cache_data
def load_and_clean_data():
    articles_df = pd.read_csv('articles.csv')
    
    # Nettoyer les donn√©es
    df_clean = articles_df[~articles_df['Nom'].str.contains('Nom|N¬∞ R√©f√©rence', na=False)]
    df_clean = df_clean.dropna(subset=['Nom', 'Prix', 'Cat√©gorie'])
    df_clean = df_clean.drop_duplicates(subset=['Nom', 'Cat√©gorie'], keep='first')
    df_clean = df_clean[~df_clean['Cat√©gorie'].str.contains('Cat√©gorie|Article', na=False)]
    df_clean['Prix'] = pd.to_numeric(df_clean['Prix'], errors='coerce')
    df_clean = df_clean.dropna(subset=['Prix'])
    
    return df_clean

articles_df = load_and_clean_data()

# Fonctions utilitaires
def calculate_cart_total():
    return sum(float(item['Prix']) for item in st.session_state.cart if item['Prix'] != 0)

def convert_pandas_to_dict(article):
    """Convertir un article pandas en dictionnaire Python natif"""
    article_dict = {}
    for key, value in article.items():
        if pd.isna(value):  # Gestion des valeurs NaN
            article_dict[key] = ""
        elif isinstance(value, (pd.Series, pd.DataFrame)):
            article_dict[key] = str(value)
        else:
            # Conversion en types Python natifs
            if key == 'Prix':
                article_dict[key] = float(value)
            else:
                article_dict[key] = str(value)
    
    return article_dict

def add_to_cart(article):
    current_total = calculate_cart_total()
    new_total = current_total + float(article['Prix'])
    
    if new_total > MAX_CART_AMOUNT:
        # Messages rigolos al√©atoires
        messages_rigolos = [
            "ü§Ø Eh mais tu vas bouffer la baraque !",
            "üò± Stop ! Tu vas ruiner l'entreprise !",
            "üö® Alerte ! Le comptable va faire une crise cardiaque !",
            "ü§ë Calme-toi Jeff Bezos !",
            "üòµ Tu te crois √† Disneyland ?!",
            "üõë Freine tes ardeurs champion !",
            "üí∏ Tu veux pas acheter l'usine tant qu'on y est ?",
            "üéØ C'est pas Koh Lanta ici !",
            "üö´ Le patron va te passer un savon !",
            "üòÇ Tu confonds avec ton compte perso ou quoi ?"
        ]
        
        message_rigolo = random.choice(messages_rigolos)
        
        # Popup rigolo avec Streamlit
        st.error(f"‚ùå {message_rigolo}")
        st.error(f"üí∞ Budget maximum: {MAX_CART_AMOUNT}‚Ç¨")
        st.error(f"üßÆ Total actuel: {current_total:.2f}‚Ç¨ + Article: {article['Prix']}‚Ç¨ = {new_total:.2f}‚Ç¨")
        
        # Animation CSS pour le popup
        st.markdown("""
        <div style="
            background: linear-gradient(45deg, #ff6b6b, #ffa500);
            color: white;
            padding: 1rem;
            border-radius: 15px;
            text-align: center;
            margin: 1rem 0;
            animation: shake 0.5s ease-in-out;
            border: 3px solid #ff4757;
        ">
            <h3>üö® BUDGET EXPLOSION D√âTECT√âE ! üö®</h3>
            <p>Redescends sur terre mon pote ! üòÑ</p>
        </div>
        
        <style>
        @keyframes shake {
            0% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            50% { transform: translateX(5px); }
            75% { transform: translateX(-5px); }
            100% { transform: translateX(0); }
        }
        </style>
        """, unsafe_allow_html=True)
        
    else:
        # Utiliser la fonction de conversion
        article_dict = convert_pandas_to_dict(article)
        st.session_state.cart.append(article_dict)
        st.success(f"‚úÖ {article_dict['Nom']} ajout√© au panier!")

def remove_from_cart(index):
    if 0 <= index < len(st.session_state.cart):
        removed_item = st.session_state.cart.pop(index)
        st.warning(f"‚ùå {removed_item['Nom']} retir√© du panier!")

def clear_cart():
    st.session_state.cart = []
    st.info("üõí Panier vid√© !")

def add_multiple_to_cart(article, quantity):
    """Ajouter plusieurs exemplaires d'un article au panier"""
    current_total = calculate_cart_total()
    article_price = float(article['Prix'])
    new_total = current_total + (article_price * quantity)
    
    if new_total > MAX_CART_AMOUNT:
        # Messages encore plus rigolos pour les gros d√©passements
        messages_gros_depassement = [
            f"ü§Ø {quantity}x ?! Tu veux ouvrir ton propre magasin ?!",
            f"üò± {quantity} articles ! Tu te crois dans un supermarch√© ?",
            f"üö® {quantity}x ! Arr√™te le massacre !",
            f"ü§ë {quantity} pi√®ces ! T'es millionnaire en secret ?",
            f"üòµ {quantity}x ! Le comptable vient de s'√©vanouir !",
            f"üõë {quantity} articles ! Tu collectionnes ou tu travailles ?",
            f"üí∏ {quantity}x ! Tu veux ruiner la bo√Æte !",
            f"üòÇ {quantity} pi√®ces ! C'est No√´l en avance ?"
        ]
        
        message_rigolo = random.choice(messages_gros_depassement)
        
        st.error(f"‚ùå {message_rigolo}")
        st.error(f"üí∞ Budget maximum: {MAX_CART_AMOUNT}‚Ç¨")
        st.error(f"üßÆ Total actuel: {current_total:.2f}‚Ç¨ + {quantity}x{article_price}‚Ç¨ = {new_total:.2f}‚Ç¨")
        
        # Popup encore plus anim√© pour les gros d√©passements
        st.markdown(f"""
        <div style="
            background: linear-gradient(45deg, #ff4757, #ff3838);
            color: white;
            padding: 1.5rem;
            border-radius: 20px;
            text-align: center;
            margin: 1rem 0;
            animation: bounce 1s ease-in-out infinite;
            border: 4px solid #ff1744;
            box-shadow: 0 0 20px rgba(255, 23, 68, 0.5);
        ">
            <h2>üö® ALERTE ROUGE ! üö®</h2>
            <h3>{quantity}x articles ! S√©rieusement ?! üòÖ</h3>
            <p>Reviens sur terre champion ! üåç</p>
        </div>
        
        <style>
        @keyframes bounce {{
            0%, 20%, 50%, 80%, 100% {{ transform: translateY(0); }}
            40% {{ transform: translateY(-10px); }}
            60% {{ transform: translateY(-5px); }}
        }}
        </style>
        """, unsafe_allow_html=True)
        
    else:
        # Ajouter chaque article individuellement (pour le d√©tail)
        article_dict = convert_pandas_to_dict(article)
        
        for i in range(quantity):
            st.session_state.cart.append(article_dict.copy())
        
        st.success(f"‚úÖ {quantity}x {article_dict['Nom']} ajout√©s au panier!")
        st.info(f"üí∞ Nouveau total : {new_total:.2f}‚Ç¨")

def add_multiple_to_cart_optimized(article, quantity):
    """Version optimis√©e qui groupe les articles identiques"""
    current_total = calculate_cart_total()
    article_price = float(article['Prix'])
    new_total = current_total + (article_price * quantity)
    
    if new_total > MAX_CART_AMOUNT:
        st.error(f"‚ùå Budget d√©pass√© ! {new_total:.2f}‚Ç¨ > {MAX_CART_AMOUNT}‚Ç¨")
        return
    
    article_dict = convert_pandas_to_dict(article)
    
    # Chercher si l'article existe d√©j√† dans le panier
    found = False
    for cart_item in st.session_state.cart:
        if cart_item['Nom'] == article_dict['Nom']:
            # Ajouter la quantit√© √† l'article existant
            if 'Quantit√©' in cart_item:
                cart_item['Quantit√©'] += quantity
            else:
                cart_item['Quantit√©'] = quantity + 1
            found = True
            break
    
    if not found:
        # Ajouter nouvel article avec quantit√©
        article_dict['Quantit√©'] = quantity
        st.session_state.cart.append(article_dict)
    
    st.success(f"‚úÖ {quantity}x {article_dict['Nom']} ajout√©s!")
    st.info(f"üí∞ Nouveau total : {new_total:.2f}‚Ç¨")

# Ajouter les fonctions groupement JUSTE APR√àS add_multiple_to_cart()

def group_articles_by_base_name(articles_df):
    """Grouper les articles par nom de base (sans taille)"""
    import re
    grouped_articles = {}
    
    for idx, article in articles_df.iterrows():
        # Extraire le nom de base (enlever les tailles courantes)
        nom_original = article['Nom']
        
        # Patterns de tailles √† enlever
        taille_patterns = [
            r'\s+Taille\s+\w+', r'\s+T\.\s*\w+', r'\s+Size\s+\w+',
            r'\s+XS\b', r'\s+S\b', r'\s+M\b', r'\s+L\b', r'\s+XL\b', r'\s+XXL\b', r'\s+XXXL\b',
            r'\s+\d+\b', r'\s+\d+/\d+\b'  # Tailles num√©riques
        ]
        
        nom_base = nom_original
        taille_detectee = ""
        
        # D√©tecter et extraire la taille
        for pattern in taille_patterns:
            match = re.search(pattern, nom_original, re.IGNORECASE)
            if match:
                taille_detectee = match.group().strip()
                nom_base = re.sub(pattern, '', nom_original, flags=re.IGNORECASE).strip()
                break
        
        # Si pas de taille d√©tect√©e, garder tel quel
        if not taille_detectee:
            taille_detectee = "Unique"
            nom_base = nom_original
        
        # Grouper
        if nom_base not in grouped_articles:
            grouped_articles[nom_base] = {
                'nom_base': nom_base,
                'categorie': article['Cat√©gorie'],
                'variants': []
            }
        
        grouped_articles[nom_base]['variants'].append({
            'taille': taille_detectee,
            'prix': article['Prix'],
            'nom_complet': nom_original,
            'unite': article.get('Unit√©', 'unit√©'),
            'article_original': article
        })
    
    return grouped_articles

def display_grouped_articles(category_articles):
    """Afficher les articles group√©s par nom de base"""
    grouped = group_articles_by_base_name(category_articles)
    
    for nom_base, group_data in grouped.items():
        variants = group_data['variants']
        
        # Si un seul variant, affichage normal
        if len(variants) == 1:
            variant = variants[0]
            article = variant['article_original']
            
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                padding: 1rem;
                border-radius: 15px;
                margin: 1rem 0;
                color: white;
                box-shadow: 0 5px 15px rgba(240, 147, 251, 0.3);
            ">
                <h4 style="margin: 0 0 0.5rem 0;">{variant['nom_complet']}</h4>
                <p style="margin: 0; opacity: 0.9;">{variant['prix']}‚Ç¨ / {variant['unite']}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Contr√¥les normaux
            col_qty, col_btn = st.columns([1, 2])
            
            with col_qty:
                qty_key = f"qty_{nom_base.replace(' ', '_')}"
                quantity = st.number_input(
                    "Quantit√©", 
                    min_value=0, 
                    max_value=50, 
                    value=0,
                    step=1,
                    key=qty_key
                )
            
            with col_btn:
                if st.button(f"üõí Ajouter au panier", key=f"add_{nom_base.replace(' ', '_')}"):
                    if quantity > 0:
                        add_multiple_to_cart(article, quantity)
                    else:
                        st.warning("‚ö†Ô∏è Veuillez s√©lectionner une quantit√© > 0")
        
        else:
            # Multiples variants = affichage group√©
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 1rem;
                border-radius: 15px;
                margin: 1rem 0;
                color: white;
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
            ">
                <h4 style="margin: 0 0 0.5rem 0;">üëï {nom_base}</h4>
                <p style="margin: 0; opacity: 0.9;">üìè {len(variants)} tailles disponibles</p>
            </div>
            """, unsafe_allow_html=True)
            
            # S√©lection de taille et quantit√©
            col_size, col_qty, col_btn = st.columns([2, 1, 2])
            
            with col_size:
                taille_options = [f"{v['taille']} - {v['prix']}‚Ç¨" for v in variants]
                taille_selectionnee = st.selectbox(
                    "Choisir taille",
                    taille_options,
                    key=f"size_{nom_base.replace(' ', '_')}"
                )
                
                # Retrouver le variant s√©lectionn√©
                selected_variant = None
                for v in variants:
                    if f"{v['taille']} - {v['prix']}‚Ç¨" == taille_selectionnee:
                        selected_variant = v
                        break
            
            with col_qty:
                quantity = st.number_input(
                    "Quantit√©",
                    min_value=0,
                    max_value=50,
                    value=0,
                    step=1,
                    key=f"qty_grouped_{nom_base.replace(' ', '_')}"
                )
            
            with col_btn:
                if st.button(f"üõí Ajouter", key=f"add_grouped_{nom_base.replace(' ', '_')}"):
                    if quantity > 0 and selected_variant:
                        add_multiple_to_cart(selected_variant['article_original'], quantity)
                    else:
                        st.warning("‚ö†Ô∏è S√©lectionnez une taille et une quantit√© > 0")

# Fonctions PDF et Email
def generate_pdfs():
    """G√©n√©rer 2 PDFs : commande + r√©ception"""
    # PDF 1 : Commande (pour commanditaire)
    buffer_commande = generate_pdf_commande()
    
    # PDF 2 : R√©ception (pour r√©ceptionnaire) 
    buffer_reception = generate_pdf_reception()
    
    return buffer_commande, buffer_reception

def generate_pdf_commande():
    """PDF pour la personne qui passe commande"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Titre principal
    title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'], fontSize=24, spaceAfter=30, alignment=1)
    title = Paragraph("üõí COMMANDE D'√âQUIPEMENTS DE PROTECTION", title_style)
    story.append(title)
    
    # Informations √©quipe
    if hasattr(st.session_state, 'contrema√Ætre') or hasattr(st.session_state, 'equipe'):
        info_style = ParagraphStyle('InfoStyle', parent=styles['Normal'], fontSize=12, alignment=1, spaceAfter=20)
        
        info_text = []
        if hasattr(st.session_state, 'contrema√Ætre') and st.session_state.contrema√Ætre:
            info_text.append(f"üë®‚Äçüíº Contrema√Ætre: {st.session_state.contrema√Ætre}")
        if hasattr(st.session_state, 'equipe') and st.session_state.equipe:
            info_text.append(f"üë∑‚Äç‚ôÇÔ∏è √âquipe: {st.session_state.equipe}")
        
        if info_text:
            info_paragraph = Paragraph("<br/>".join(info_text), info_style)
            story.append(info_paragraph)
    
    # Date
    date_style = ParagraphStyle('DateStyle', parent=styles['Normal'], fontSize=12, alignment=1)
    date_text = Paragraph(f"üìÖ Date: {datetime.now().strftime('%d/%m/%Y %H:%M')}", date_style)
    story.append(date_text)
    story.append(Spacer(1, 20))
    
    # Tableau des articles NORMAL
    data = [['Article', 'Cat√©gorie', 'Prix (‚Ç¨)', 'Unit√©']]
    total = 0
    
    for item in st.session_state.cart:
        price = float(item['Prix'])
        data.append([
            item['Nom'],
            item['Cat√©gorie'],
            f"{price:.2f}",
            item.get('Unit√©', 'unit√©')
        ])
        total += price
    
    # Ligne total
    data.append(['', '', f"TOTAL: {total:.2f}‚Ç¨", ''])
    
    # Style du tableau
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -2), colors.beige),
        ('BACKGROUND', (0, -1), (-1, -1), colors.lightgreen),
        ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    doc.build(story)
    
    buffer.seek(0)
    return buffer

def generate_pdf_reception():
    """PDF pour la personne qui r√©ceptionne (avec checkboxes)"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Titre principal SANS carr√©s noirs
    title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'], fontSize=24, spaceAfter=30, alignment=1)
    title = Paragraph("BON DE R√âCEPTION - √âQUIPEMENTS EPI", title_style)
    story.append(title)
    
    # Informations √©quipe
    if hasattr(st.session_state, 'contrema√Ætre') or hasattr(st.session_state, 'equipe'):
        info_style = ParagraphStyle('InfoStyle', parent=styles['Normal'], fontSize=12, alignment=1, spaceAfter=20)
        
        info_text = []
        if hasattr(st.session_state, 'contrema√Ætre') and st.session_state.contrema√Ætre:
            info_text.append(f"Contrema√Ætre: {st.session_state.contrema√Ætre}")
        if hasattr(st.session_state, 'equipe') and st.session_state.equipe:
            info_text.append(f"√âquipe: {st.session_state.equipe}")
        
        if info_text:
            info_paragraph = Paragraph("<br/>".join(info_text), info_style)
            story.append(info_paragraph)
    
    # Date 
    date_style = ParagraphStyle('DateStyle', parent=styles['Normal'], fontSize=12, alignment=1)
    date_text = Paragraph(f"Date commande: {datetime.now().strftime('%d/%m/%Y %H:%M')}", date_style)
    story.append(date_text)
    story.append(Spacer(1, 20))
    
    # Instructions SANS carr√©s noirs
    instruction_style = ParagraphStyle('InstructionStyle', parent=styles['Normal'], fontSize=14, alignment=1, spaceAfter=20)
    instruction = Paragraph("<b>INSTRUCTIONS:</b> Cochez les cases lors de la r√©ception des articles", instruction_style)
    story.append(instruction)
    story.append(Spacer(1, 20))
    
    # Tableau SIMPLE sans symboles
    data = [['Coch√©', 'Article', 'Cat√©gorie', 'Prix (‚Ç¨)', 'Quantit√©', 'Re√ßu']]
    total = 0
    
    for item in st.session_state.cart:
        price = float(item['Prix'])
        data.append([
            '',  # Colonne vide pour cocher
            item['Nom'],
            item['Cat√©gorie'], 
            f"{price:.2f}",
            '1',
            ''   # Colonne vide pour "Re√ßu"
        ])
        total += price
    
    # Ligne total
    data.append(['', '', '', f"TOTAL: {total:.2f}‚Ç¨", '', ''])
    
    # Style du tableau
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -2), colors.lightblue),
        ('BACKGROUND', (0, -1), (-1, -1), colors.lightgreen),
        ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 2, colors.black)
    ]))
    
    story.append(table)
    story.append(Spacer(1, 30))
    
    # Section signature SANS carr√©s noirs
    signature_style = ParagraphStyle('SignatureStyle', parent=styles['Normal'], fontSize=12, spaceAfter=10)
    
    story.append(Paragraph("<b>R√âCEPTION EFFECTU√âE PAR:</b>", signature_style))
    story.append(Spacer(1, 20))
    story.append(Paragraph("Nom: ________________________________", signature_style))
    story.append(Spacer(1, 15))
    story.append(Paragraph("Date: ________________________________", signature_style))
    story.append(Spacer(1, 15))
    story.append(Paragraph("Signature: ________________________________", signature_style))
    
    doc.build(story)
    
    buffer.seek(0)
    return buffer

# En-t√™te principal
st.markdown("""
<div class="main-header">
    <h1 style="color: white; font-weight: 800; font-size: 2.2rem; margin-bottom: 0.5rem; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">üõí Bienvenue dans Commande Articles et EPI</h1>
    <p style="text-align: center; color: white; font-family: 'Inter', sans-serif; margin: 0; font-size: 1.2rem; font-weight: 500;">
        üõ°Ô∏è **Votre solution compl√®te pour les √©quipements de protection individuelle**
    </p>
</div>
""", unsafe_allow_html=True)

# Section informations √©quipe
st.markdown("""
<div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 1.5rem; border-radius: 15px; margin-bottom: 2rem; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);">
    <h3 style="color: white; margin: 0 0 1rem 0; font-family: 'Inter', sans-serif; font-weight: 600;">üë• Informations de l'√©quipe</h3>
</div>
""", unsafe_allow_html=True)

# Listes pr√©d√©finies
contrema√Ætres_list = [
    "S√©lectionner un contrema√Ætre...",
    "PINTO",
    "CASAIS", 
    "WROBEL",
    "ORLANDI",
    "KADRI",
    "SHOM"
]

equipes_list = [
    "S√©lectionner une √©quipe...",
    "PFI1",
    "PFI2",
    "PFI3", 
    "PFI4",
    "PFI5",
    "PFI6"
]

# Champs d√©roulants pour contrema√Ætre et √©quipe
col1, col2 = st.columns(2)
with col1:
    contrema√Ætre = st.selectbox(
        "üë®‚Äçüíº Nom du contrema√Ætre", 
        contrema√Ætres_list,
        key="contrema√Ætre_select"
    )
with col2:
    equipe = st.selectbox(
        "üë∑‚Äç‚ôÇÔ∏è √âquipe", 
        equipes_list,
        key="equipe_select"
    )

# Sauvegarder dans session_state seulement si une option valide est s√©lectionn√©e
if contrema√Ætre and contrema√Ætre != "S√©lectionner un contrema√Ætre...":
    st.session_state.contrema√Ætre = contrema√Ætre
    
if equipe and equipe != "S√©lectionner une √©quipe...":
    st.session_state.equipe = equipe

# Sidebar pour le panier (identique √† avant mais condens√©)
with st.sidebar:
    cart_count = len(st.session_state.cart)
    current_total = calculate_cart_total()
    
    st.markdown(f"""
    <div class="cart-header">
        <h2 style="margin: 0; font-size: 1.5rem;">üõí PANIER</h2>
        <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9;">
            üì¶ {cart_count} article{'s' if cart_count != 1 else ''}
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Afficher les infos √©quipe si renseign√©es
    if (hasattr(st.session_state, 'contrema√Ætre') and st.session_state.contrema√Ætre) or \
       (hasattr(st.session_state, 'equipe') and st.session_state.equipe):
        st.markdown("### üë• √âquipe s√©lectionn√©e")
        if hasattr(st.session_state, 'contrema√Ætre') and st.session_state.contrema√Ætre:
            st.markdown(f"**üë®‚Äçüíº Contrema√Ætre:** {st.session_state.contrema√Ætre}")
        if hasattr(st.session_state, 'equipe') and st.session_state.equipe:
            st.markdown(f"**üë∑‚Äç‚ôÇÔ∏è √âquipe:** {st.session_state.equipe}")
        st.markdown("---")
    
    if st.session_state.cart:
        # Affichage du total et gestion du panier (code existant)
        if current_total > MAX_CART_AMOUNT * 0.9:
            st.markdown(f"""
            <div class="cart-warning">
                ‚ö†Ô∏è ATTENTION<br>
                {current_total:.2f}‚Ç¨ / {MAX_CART_AMOUNT}‚Ç¨<br>
                <small>Limite presque atteinte!</small>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="cart-total">
                üí∞ TOTAL<br>
                {current_total:.2f}‚Ç¨ / {MAX_CART_AMOUNT}‚Ç¨
            </div>
            """, unsafe_allow_html=True)
        
        if st.button("üóëÔ∏è Vider le panier", key="clear_cart"):
            clear_cart()
            st.rerun()
        
        st.markdown("---")
        
        # Articles du panier (condens√©)
        st.markdown("### üõí Panier")
        
        total = 0
        for i, item in enumerate(st.session_state.cart):
            qty = item.get('Quantit√©', 1)
            item_total = float(item['Prix']) * qty
            total += item_total
            
            col1, col2, col3 = st.columns([3, 1, 1])
            with col1:
                st.markdown(f"**{item['Nom']}**")
                if qty > 1:
                    st.markdown(f"*{qty}x {item['Prix']}‚Ç¨ = {item_total:.2f}‚Ç¨*")
                else:
                    st.markdown(f"*{item['Prix']}‚Ç¨*")
            
            with col2:
                if qty > 1:
                    new_qty = st.number_input(
                        "Qt√©", 
                        min_value=1, 
                        value=qty, 
                        key=f"cart_qty_{i}",
                        help="Modifier quantit√©"
                    )
                    if new_qty != qty:
                        st.session_state.cart[i]['Quantit√©'] = new_qty
                        st.rerun()
            
            with col3:
                if st.button("üóëÔ∏è", key=f"remove_{i}", help="Supprimer"):
                    remove_from_cart(i)
                    st.rerun()
        
        st.markdown(f"### üí∞ **Total: {total:.2f}‚Ç¨**")
        
        # Section finalisation commande dans col2 (panier)
        if st.session_state.cart:
            st.markdown("### üìã Finaliser la commande")
            
            # Boutons PDF
            col_pdf1, col_pdf2 = st.columns(2)
            
            with col_pdf1:
                if st.button("üìÑ G√©n√©rer PDF Commande", type="primary"):
                    if st.session_state.contrema√Ætre and st.session_state.equipe:
                        try:
                            # G√©n√©rer le PDF
                            pdf_buffer = generate_pdf_commande()
                            
                            # üÜï ENREGISTRER DANS LA BASE DE DONN√âES
                            total_prix = calculate_cart_total()
                            commande_id = save_commande_to_db(
                                st.session_state.contrema√Ætre,
                                st.session_state.equipe, 
                                st.session_state.cart,
                                total_prix
                            )
                            
                            # T√©l√©chargement du PDF
                            st.download_button(
                                label="‚¨áÔ∏è T√©l√©charger le PDF",
                                data=pdf_buffer.getvalue(),
                                file_name=f"commande_{st.session_state.contrema√Ætre}_{st.session_state.equipe}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                                mime="application/pdf"
                            )
                            
                            st.success(f"‚úÖ PDF g√©n√©r√© et commande #{commande_id} enregistr√©e !")
                            st.info("üí° Vous pouvez maintenant vider le panier ou continuer vos achats")
                            
                        except Exception as e:
                            st.error(f"‚ùå Erreur lors de la g√©n√©ration : {str(e)}")
                    else:
                        st.warning("‚ö†Ô∏è Veuillez remplir le contrema√Ætre et l'√©quipe avant de g√©n√©rer le PDF")
            
            with col_pdf2:
                if st.button("üìã G√©n√©rer PDF R√©ception", type="secondary"):
                    if st.session_state.contrema√Ætre and st.session_state.equipe:
                        try:
                            # G√©n√©rer le PDF de r√©ception
                            pdf_buffer = generate_pdf_reception()
                            
                            # T√©l√©chargement (pas besoin de re-sauvegarder si d√©j√† fait pour la commande)
                            st.download_button(
                                label="‚¨áÔ∏è T√©l√©charger PDF R√©ception",
                                data=pdf_buffer.getvalue(),
                                file_name=f"reception_{st.session_state.contrema√Ætre}_{st.session_state.equipe}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                                mime="application/pdf"
                            )
                            
                        except Exception as e:
                            st.error(f"‚ùå Erreur : {str(e)}")
    else:
        st.markdown("""
        <div style="text-align: center; padding: 2rem; color: #718096; font-family: 'Poppins', sans-serif;">
            <div style="font-size: 3rem; margin-bottom: 1rem;">üõí</div>
            <h3 style="margin: 0;">Votre panier est vide</h3>
            <p style="margin: 0.5rem 0 0 0; opacity: 0.8;">Ajoutez des articles pour commencer !</p>
        </div>
        """, unsafe_allow_html=True)

# Interface principale avec navigation par cat√©gories
col1, col2 = st.columns([3, 1])

with col2:
    st.markdown("### üß≠ Navigation")
    
    page = st.selectbox(
        "üìç Aller √† :",
        ["üõí Catalogue", "üìä Historique", "üìà Statistiques"],
        key="page_select"
    )

with col1:
    # Navigation entre les pages  
    if page == "üõí Catalogue":
        # Recherche avanc√©e (optionnelle)
        if st.session_state.show_search:
            st.markdown("""
            <div class="search-section">
                <h3>üîç Recherche avanc√©e</h3>
                <p style="color: #718096; margin: 0;">Trouvez rapidement l'article que vous cherchez</p>
            </div>
            """, unsafe_allow_html=True)
            
            query = st.text_input("", placeholder="üîç Tapez le nom d'un article...", label_visibility="collapsed")
            
            if query:
                query_lower = query.lower()
                filtered_articles = articles_df[
                    articles_df['Nom'].str.lower().str.contains(query_lower, na=False) |
                    articles_df['Description'].str.lower().str.contains(query_lower, na=False)
                ]
                
                st.markdown(f"""
                <div style="margin: 1rem 0; padding: 1rem; background: rgba(102, 126, 234, 0.1); border-radius: 10px; border-left: 4px solid #667eea;">
                    <strong style="color: #667eea;">üìä {len(filtered_articles)} articles trouv√©s</strong>
                </div>
                """, unsafe_allow_html=True)
                
                for _, article in filtered_articles.head(10).iterrows():
                    st.markdown(f"""
                    <div class="article-card">
                        <div class="article-name">{article['Nom']}</div>
                        <div class="article-description">{article['Description']}</div>
                        <div class="article-price">{article['Prix']} ‚Ç¨ / {article['Unit√©']}</div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    if st.button(f"‚ûï Ajouter au panier", key=f"search_{article['R√©f√©rence']}"):
                        add_to_cart(article)
                        st.rerun()

        # Affichage principal : Cat√©gories ou Articles d'une cat√©gorie
        if st.session_state.selected_category is None and not st.session_state.show_search:
            # Vue des cat√©gories - Design moderne
            st.markdown("""
            <div style="text-align: center; margin: 3rem 0;">
                <h1 style="color: white; font-family: 'Inter', sans-serif; font-weight: 800; font-size: 2.5rem; margin-bottom: 1rem; text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);">
                    üõ°Ô∏è √âquipements de Protection Individuelle
                </h1>
                <p style="color: rgba(255, 255, 255, 0.9); font-family: 'Inter', sans-serif; margin: 0; font-size: 1.2rem; font-weight: 400;">
                    D√©couvrez notre gamme compl√®te d'EPI professionnels
                </p>
            </div>
            """, unsafe_allow_html=True)
            
            categories = sorted(articles_df['Cat√©gorie'].unique())
            
            # D√©finir des ic√¥nes EPI pour chaque cat√©gorie
            category_icons = {
                'Bourses/Pochettes': 'üéí',
                'Casques': '‚õëÔ∏è', 
                'Chaussures': 'ü•æ',
                'Gants': 'üß§',
                'Outils': 'üîß',
                'Lunette': 'ü•Ω',
                'Pointure': 'üë¢',
                'Veste Blouson': 'ü¶∫',
                'Jugulaire': '‚õëÔ∏è',
                'Fort M√©tal Peinture': 'üé®',
                'Lampe': 'üî¶'
            }
            
            # Afficher les cat√©gories en grille
            cols = st.columns(2)
            
            for i, category in enumerate(categories):
                article_count = len(articles_df[articles_df['Cat√©gorie'] == category])
                icon = category_icons.get(category, 'üõ°Ô∏è')
                
                with cols[i % 2]:
                    # Cr√©er une carte avec bouton Streamlit fonctionnel
                    st.markdown(f"""
                    <div class="category-card">
                        <div class="category-icon">{icon}</div>
                        <div class="category-title">{category}</div>
                        <div class="category-count">{article_count} article{'s' if article_count != 1 else ''}</div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Bouton fonctionnel en pleine largeur
                    if st.button(f"üîç Explorer {category}", key=f"cat_{category}", help=f"Voir les {article_count} articles de {category}"):
                        st.session_state.selected_category = category
                        st.rerun()

        elif st.session_state.selected_category and not st.session_state.show_search:
            # Vue des articles d'une cat√©gorie
            category = st.session_state.selected_category
            category_articles = articles_df[articles_df['Cat√©gorie'] == category]
            
            # BOUTON RETOUR EN HAUT - TR√àS VISIBLE üîù
            st.markdown("""
            <div style="background: #f0f0f0; padding: 1rem; border-radius: 10px; margin-bottom: 1rem; text-align: center;">
            """, unsafe_allow_html=True)
            
            if st.button("üè† ‚¨ÖÔ∏è RETOUR AUX CAT√âGORIES", key="back_to_categories_top", 
                       type="primary", help="Cliquez pour retourner aux cat√©gories"):
                st.session_state.selected_category = None
                st.session_state.show_search = False
                st.rerun()
            
            st.markdown("</div>", unsafe_allow_html=True)
            
            st.markdown(f"""
            <div style="text-align: center; margin: 2rem 0;">
                <h2 style="color: #2d3748; font-family: 'Poppins', sans-serif; font-weight: 600; margin-bottom: 0.5rem;">
                    üìÅ {category}
                </h2>
                <p style="color: #718096; font-family: 'Poppins', sans-serif; margin: 0;">
                    {len(category_articles)} articles dans cette cat√©gorie
                </p>
            </div>
            """, unsafe_allow_html=True)
            
            # AFFICHAGE GROUP√â DES ARTICLES
            display_grouped_articles(category_articles)

    elif page == "üìä Historique":
        st.markdown("""
        <div style="text-align: center; margin: 2rem 0;">
            <h2 style="color: #2d3748; font-family: 'Poppins', sans-serif; font-weight: 600;">
                üìä Historique des Commandes
            </h2>
            <p style="color: #718096; font-family: 'Poppins', sans-serif;">
                Consultez toutes les commandes pass√©es
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        try:
            df_commandes = get_all_commandes()
            
            if len(df_commandes) > 0:
                # Filtres
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    filtre_equipe = st.selectbox(
                        "üë∑‚Äç‚ôÇÔ∏è Filtrer par √©quipe",
                        ["Toutes"] + list(df_commandes['equipe'].unique())
                    )
                
                with col2:
                    filtre_contrema√Ætre = st.selectbox(
                        "üë®‚Äçüíº Filtrer par contrema√Ætre", 
                        ["Tous"] + list(df_commandes['contrema√Ætre'].unique())
                    )
                
                with col3:
                    periode = st.selectbox(
                        "üìÖ P√©riode",
                        ["Tout", "30 derniers jours", "7 derniers jours", "Aujourd'hui"]
                    )
                
                # Appliquer les filtres
                df_filtered = df_commandes.copy()
                
                if filtre_equipe != "Toutes":
                    df_filtered = df_filtered[df_filtered['equipe'] == filtre_equipe]
                
                if filtre_contrema√Ætre != "Tous":
                    df_filtered = df_filtered[df_filtered['contrema√Ætre'] == filtre_contrema√Ætre]
                
                if periode != "Tout":
                    aujourd_hui = datetime.now()
                    if periode == "Aujourd'hui":
                        df_filtered = df_filtered[df_filtered['date'].str.startswith(aujourd_hui.strftime('%Y-%m-%d'))]
                    elif periode == "7 derniers jours":
                        il_y_a_7_jours = (aujourd_hui - timedelta(days=7)).strftime('%Y-%m-%d')
                        df_filtered = df_filtered[df_filtered['date'] >= il_y_a_7_jours]
                    elif periode == "30 derniers jours":
                        il_y_a_30_jours = (aujourd_hui - timedelta(days=30)).strftime('%Y-%m-%d')
                        df_filtered = df_filtered[df_filtered['date'] >= il_y_a_30_jours]
                
                # Affichage r√©sultats
                st.markdown(f"**üìã {len(df_filtered)} commandes trouv√©es**")
                
                # Tableau des commandes
                for _, commande in df_filtered.iterrows():
                    with st.expander(f"üõí Commande #{commande['id']} - {commande['date'][:16]} - {commande['total_prix']:.2f}‚Ç¨"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.markdown(f"**üë®‚Äçüíº Contrema√Ætre:** {commande['contrema√Ætre']}")
                            st.markdown(f"**üë∑‚Äç‚ôÇÔ∏è √âquipe:** {commande['equipe']}")
                        
                        with col2:
                            st.markdown(f"**üí∞ Total:** {commande['total_prix']:.2f}‚Ç¨")
                            st.markdown(f"**üì¶ Articles:** {commande['nb_articles']}")
                        
                        with col3:
                            st.markdown(f"**üìÖ Date:** {commande['date'][:16]}")
                            st.markdown(f"**‚úÖ Statut:** {commande['statut']}")
                        
                        # D√©tail des articles
                        if st.button(f"üëÄ Voir d√©tails", key=f"details_{commande['id']}"):
                            articles = json.loads(commande['articles_json'])
                            st.markdown("**üìã Articles command√©s :**")
                            for article in articles:
                                st.markdown(f"- **{article['Nom']}** - {article['Prix']}‚Ç¨ ({article['Cat√©gorie']})")
                
            else:
                st.info("üì≠ Aucune commande enregistr√©e pour le moment.")
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors du chargement : {str(e)}")

    elif page == "üìà Statistiques":
        st.markdown("""
        <div style="text-align: center; margin: 2rem 0;">
            <h2 style="color: #2d3748; font-family: 'Poppins', sans-serif; font-weight: 600;">
                üìà Statistiques et Bilans
            </h2>
            <p style="color: #718096; font-family: 'Poppins', sans-serif;">
                Analysez les d√©penses et tendances
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        try:
            stats = get_statistics()
            
            # M√©triques principales
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    label="üìã Total Commandes",
                    value=stats['total_commandes']
                )
            
            with col2:
                st.metric(
                    label="üí∞ Total D√©pens√©", 
                    value=f"{stats['total_depense']:.2f}‚Ç¨"
                )
            
            with col3:
                if stats['total_commandes'] > 0:
                    moyenne = stats['total_depense'] / stats['total_commandes']
                    st.metric(
                        label="üìä Moyenne/Commande",
                        value=f"{moyenne:.2f}‚Ç¨"
                    )
            
            with col4:
                # Calculer la p√©riode r√©elle bas√©e sur les donn√©es
                if stats['total_commandes'] > 0:
                    # R√©cup√©rer la premi√®re et derni√®re commande
                    df_commandes = get_all_commandes()
                    if len(df_commandes) > 0:
                        premiere_date = df_commandes['date'].min()[:4]  # Ann√©e de la premi√®re commande
                        derniere_date = df_commandes['date'].max()[:4]  # Ann√©e de la derni√®re commande
                        
                        if premiere_date == derniere_date:
                            periode_text = premiere_date
                        else:
                            periode_text = f"{premiere_date}-{derniere_date}"
                    else:
                        periode_text = str(datetime.now().year)
                else:
                    periode_text = str(datetime.now().year)
                
                st.metric(
                    label="üìÖ P√©riode",
                    value=periode_text
                )
            
            st.markdown("---")
            
            # Graphiques
            if len(stats['df_equipes']) > 0:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üë∑‚Äç‚ôÇÔ∏è D√©penses par √âquipe")
                    fig_equipes = px.bar(
                        stats['df_equipes'], 
                        x='equipe', 
                        y='total_prix',
                        title="Montant total par √©quipe",
                        color='total_prix',
                        color_continuous_scale='viridis'
                    )
                    st.plotly_chart(fig_equipes, use_container_width=True)
                
                with col2:
                    st.markdown("### üë®‚Äçüíº D√©penses par Contrema√Ætre") 
                    fig_contremaitres = px.pie(
                        stats['df_contremaitres'],
                        values='total_prix',
                        names='contrema√Ætre', 
                        title="R√©partition par contrema√Ætre"
                    )
                    st.plotly_chart(fig_contremaitres, use_container_width=True)
            
            # √âvolution mensuelle
            if len(stats['df_mensuel']) > 0:
                st.markdown("### üìà √âvolution Mensuelle")
                fig_mensuel = px.line(
                    stats['df_mensuel'],
                    x='mois',
                    y='total_prix', 
                    title="√âvolution des d√©penses mensuelles",
                    markers=True
                )
                st.plotly_chart(fig_mensuel, use_container_width=True)
            
            # Tableaux d√©taill√©s
            st.markdown("---")
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üìä Top √âquipes")
                st.dataframe(stats['df_equipes'], use_container_width=True)
            
            with col2:
                st.markdown("### üìä Top Contrema√Ætres") 
                st.dataframe(stats['df_contremaitres'], use_container_width=True)
                
            # Export
            if st.button("üì§ Exporter les statistiques Excel"):
                # Cr√©er un fichier Excel avec les stats
                st.info("üöß Fonctionnalit√© d'export en d√©veloppement...")
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors du calcul des statistiques : {str(e)}")

# Ajouter une fonction de test (temporaire)
def test_database_connection():
    """Tester la connexion √† la base de donn√©es"""
    try:
        if USE_POSTGRESQL:
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            conn.close()
            return f"‚úÖ PostgreSQL connect√©: {version[0][:50]}..."
        else:
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT sqlite_version();")
            version = cursor.fetchone()
            conn.close()
            return f"‚úÖ SQLite connect√©: {version[0]}"
    except Exception as e:
        return f"‚ùå Erreur connexion: {str(e)}"

# Dans votre sidebar, ajouter temporairement :
with st.sidebar:
    st.markdown("---")
    st.markdown("### üîß Debug")
    if st.button("üóÑÔ∏è Test DB"):
        result = test_database_connection()
        if "‚úÖ" in result:
            st.success(result)
        else:
            st.error(result)